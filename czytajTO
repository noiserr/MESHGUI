--------------
-----MESH-----
--------------

Część graifczna działa wyśmienicie, zaimplemnotwałem algorytm RNC, który nawet działa.

Dodatkowo dodałem kilka funkcjonalności w klasie Mesh.

Mianowicie:
-metoda printArray(); wyświetla siatkę w konsoli
-metoda gridIsFree(x,y, Task allocatingTask); sprawdza czy w całym obszarze można zaalokować zadanie
-metoda allocateTask(x,y, Task allocatingTask); lokuje zadanie na siatce
-metoda removeTask(x,y, Task allocatingTask); czyścu obszar po zakonczniu konkretnego zadania


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

W metodach:
allocateTask(int startX, int startY, Task allocatingTask)
removeTask(int startX, int startY, Task allocatingTask)
gridIsFree(int startX, int startY, Task allocatingTask)

z klasy Mesh, były pomieszane zmienne X i Y, oraz metoda gridIsFree() nie wyszukiwała wszystkich możliwości alokacji zadań, naniosłem
kilka zmian i powinno działać dobrze. Jak by były problemy to piszcie ~~~ Mariusz
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---------------
----PROTIPS----
---------------

Indexy w siatce prezentują się nastepująco:

(x,y)


(0,0)(0,1)(0,2)
(1,0)(1,1)(1,2)
(2,0)(2,1)(3,2)

-------------------------------

Jak wiadomo w celu poruszania sie po takiej siatce można użyć 2 pętli for:
By wszytsko działało polecam najpierw poruszać się w High, a wdrugiej pętli w Width

for (..; i < getHeight();..) {
            for (..; j < getWidth();..) {
            }
}

-------------------------------
Dwie klasy MeshProvider i TaskListProvider zapewniają
możliwość pobrania listy z dowolnego miejsca z kodzie, pamiętajcia aby skopiować listę, a nie pracować na oryginale!

---------------
------END------
---------------
